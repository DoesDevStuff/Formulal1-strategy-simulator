
## Problem Statement: 

In a Formula-1 challenge, there are n teams numbered 1 to n. Each team has a car and a driver. Car’s specification are as follows:
– Top speed: (150 + 10 * i) km per hour
– Acceleration: (2 * i) meter per second square.
– Handling factor (hf) = 0.8
– Nitro : Increases the speed to double or top speed, whichever is less. Can be used only once.

Here i is the team number.
The cars line up for the race. The start line for (i + 1)th car is 200 * i meters behind the ith car.

All of them start at the same time and try to attain their top speed.
A re-assessment of the positions is done every 2 seconds(So even if the car has crossed the finish line in between, you’ll get to know after 2 seconds).
During this assessment, each driver checks if there is any car within 10 meters of his car, his speed reduces to: hf * (speed at that moment).
Also, if the driver notices that he is the last one on the race, he uses ‘nitro’.

Taking the number of teams and length of track as the input, Calculate the final speeds and the corresponding completion times.

Question: What is the track length? (to determine which is the car that first crossed finish line)

----------------------------------------------------------------------------------------------------
s = displacement; u = initial velocity; v = final velocity; a = acceleration; t = time of motion
----------------------------------------------------------------------------------------------------
v = u + at
s = ut + 1/2 * a * t^2

in this case u (initial velocuty) is zero
v = at
s = 1/2 * a * t^2

Km per hour to meters / sec
----------------------------
Km to m = 1000, hour to sec = 3600
multiplication factor = 1000/3600 = 10/36 = 5/18
division factor = 3600/1000 = 3.6 = 36/10 = 18/5

----------------------------------------------------------------------------------------------------
Program
----------------------------------------------------------------------------------------------------
1) Object Car (
For each car i:
Constructor: arguments: 1) array of car objects, 2) its own index.
it should construct and insert in the array at its index

Top speed = ( ( (150 + (10 * i) ) * 5) / 18 ) m/s
Acceleration = (2 * i) m/s^2
Others specific to each car

Run time:
Each car should have 2 functions that will be called every n seconds (2 seconds here)
1) Calculate current speed and distance teavelled --- CalculateSpeedAndDistanceTravelled()
2) Reduce speed in case of possible collision with other car --- ReduceSpeedForPossibleCollision()
3) Increase speed by Nitro if it is the last car IncreaseSpeedWithNitro()

----------------------------------------------------------------------------------------------------
2) Object Race:
   - Create instances of cars
   - Call the 3 functions at regular intervals (2 Sec)

Run time:
	- Create and add Car objects, passing each of them an array object, and index
	- In a while loop call the 3 functions
	- Determine a win

----------------------------------------------------------------------------------------------------
When multithreading, the car objects themselves can calculate the (3 functions), The Object Race
just has to monitor every 2 seconds

